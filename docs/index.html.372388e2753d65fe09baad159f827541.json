{"head":{"description":"node-vibrant Build Status Extract prominent colors from an image. Features Identical API for both node.js and browser environment Supportâ€¦"},"body":"<h1 id=\"node-vibrant\"><a href=\"#node-vibrant\" class=\"phenomic-HeadingAnchor\">#</a>node-vibrant</h1>\n<p><a href=\"https://travis-ci.org/akfish/node-vibrant\"><img src=\"https://travis-ci.org/akfish/node-vibrant.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p>Extract prominent colors from an image.</p>\n<h2 id=\"features\"><a href=\"#features\" class=\"phenomic-HeadingAnchor\">#</a>Features</h2>\n<ul>\n<li>Identical API for both node.js and browser environment</li>\n<li>Support browserify/webpack</li>\n<li>Consistent results (*See <a href=\"#result-consistency\">Result Consistency</a>)</li>\n</ul>\n<h2 id=\"install\"><a href=\"#install\" class=\"phenomic-HeadingAnchor\">#</a>Install</h2>\n<pre><code class=\"hljs language-bash\">$ npm install node-vibrant</code></pre>\n<h2 id=\"usage\"><a href=\"#usage\" class=\"phenomic-HeadingAnchor\">#</a>Usage</h2>\n<h3 id=\"nodejs--browserify\"><a href=\"#nodejs--browserify\" class=\"phenomic-HeadingAnchor\">#</a>node.js / browserify</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">var</span> Vibrant = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node-vibrant'</span>)\n<span class=\"hljs-comment\">// ES6</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> Vibrant <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'node-vibrant'</span>\n<span class=\"hljs-comment\">// TypeScript</span>\n<span class=\"hljs-keyword\">import</span> Vibrant = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node-vibrant'</span>)\n\n<span class=\"hljs-comment\">// Using builder</span>\nVibrant.from(<span class=\"hljs-string\">'path/to/image'</span>).getPalette(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, palette</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(palette))\n<span class=\"hljs-comment\">// Promise</span>\nVibrant.from(<span class=\"hljs-string\">'path/to/image'</span>).getPalette()\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">palette</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(palette))\n\n<span class=\"hljs-comment\">// Using constructor</span>\n<span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-keyword\">new</span> Vibrant(<span class=\"hljs-string\">'path/to/image'</span>, opts)\nv.getPalette(<span class=\"hljs-function\">(<span class=\"hljs-params\">err, palette</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(palette))\n<span class=\"hljs-comment\">// Promise</span>\nv.getPalette().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">palette</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(palette))</code></pre>\n<h3 id=\"browser\"><a href=\"#browser\" class=\"phenomic-HeadingAnchor\">#</a>Browser</h3>\n<p>If you installed node-vibrant with <code>npm</code>, compiled bundles are available under <code>node_modules/node-vibrant/dist</code>.\nOr you can download bundles from <a href=\"https://github.com/akfish/node-vibrant/releases\">Relases</a>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!-- Debug version --></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/path/to/dist/vibrant.js\"</span>></span><span class=\"null\"></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-comment\">&#x3C;!-- Uglified version --></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/path/to/dist/vibrant.min.js\"</span>></span><span class=\"null\"></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"actionscript\">\n  <span class=\"hljs-comment\">// Use `Vibrant` in script</span>\n  <span class=\"hljs-comment\">// Vibrant is exported to global. window.Vibrant === Vibrant</span>\n  Vibrant.from(<span class=\"hljs-string\">'path/to/image'</span>).getPalette(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err, palette)</span> </span>{});\n  <span class=\"hljs-comment\">// Promise</span>\n  Vibrant.from(<span class=\"hljs-string\">'path/to/image'</span>).getPalette().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(palette)</span> </span>{});\n  <span class=\"hljs-comment\">// Or</span>\n  <span class=\"hljs-keyword\">var</span> v = <span class=\"hljs-keyword\">new</span> Vibrant(<span class=\"hljs-string\">'/path/to/image'</span>, opts);\n  <span class=\"hljs-comment\">// ... same as in node.js</span>\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></code></pre>\n<h2 id=\"contribution-guidelines\"><a href=\"#contribution-guidelines\" class=\"phenomic-HeadingAnchor\">#</a>Contribution Guidelines</h2>\n<ol>\n<li>Make changes</li>\n<li>Write test specs if necessary</li>\n<li>Pass tests</li>\n<li>Commit <strong>source files only</strong> (without compiled files)</li>\n</ol>\n<h2 id=\"references\"><a href=\"#references\" class=\"phenomic-HeadingAnchor\">#</a>References</h2>\n<h3 id=\"vibrant\"><a href=\"#vibrant\" class=\"phenomic-HeadingAnchor\">#</a><code>Vibrant</code></h3>\n<p>Main class of <code>node-vibrant</code>.</p>\n<h4 id=\"vibrantfromsrc-imagesource-builder\"><a href=\"#vibrantfromsrc-imagesource-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>Vibrant.from(src: ImageSource): Builder</code></h4>\n<p>Make a <code>Builder</code> for an image. Returns a <code>Builder</code> instance.</p>\n<h4 id=\"constructorsrc-imagesource-opts-partialoptions\"><a href=\"#constructorsrc-imagesource-opts-partialoptions\" class=\"phenomic-HeadingAnchor\">#</a><code>constructor(src: ImageSource, opts: Partial&#x3C;Options>)</code></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>image</code></td>\n<td>Path to image file (support HTTP/HTTPs)</td>\n</tr>\n<tr>\n<td><code>opts</code></td>\n<td>Options (optional)</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"imagesource\"><a href=\"#imagesource\" class=\"phenomic-HeadingAnchor\">#</a><code>ImageSource</code></h5>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> ImageSource = <span class=\"hljs-built_in\">string</span> \n  | HTMLImageElement  <span class=\"hljs-comment\">// Browser only </span>\n  | Buffer            <span class=\"hljs-comment\">// Node.js only</span></code></pre>\n<h5 id=\"options\"><a href=\"#options\" class=\"phenomic-HeadingAnchor\">#</a><code>Options</code></h5>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Options {\n    colorCount: <span class=\"hljs-built_in\">number</span>\n    quality: <span class=\"hljs-built_in\">number</span>\n    maxDimension: <span class=\"hljs-built_in\">number</span>\n    filters: <span class=\"hljs-built_in\">Array</span>&#x3C;Filter>\n    ImageClass: ImageClass\n    quantizer: Quantizer\n    generator?: Generator\n}</code></pre>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>colorCount</code></td>\n<td>64</td>\n<td>amount of colors in initial palette from which the swatches will be generated</td>\n</tr>\n<tr>\n<td><code>quality</code></td>\n<td>5</td>\n<td>Scale down factor used in downsampling stage. \n<code>1</code>\n means no downsampling. If \n<code>maxDimension</code>\n is set, this value will not be used.</td>\n</tr>\n<tr>\n<td><code>maxDimension</code></td>\n<td><code>undefined</code></td>\n<td>The max size of the image's longer side used in downsampling stage. This field will override \n<code>quality</code>\n.</td>\n</tr>\n<tr>\n<td><code>filters</code></td>\n<td><code>[]</code></td>\n<td>An array of filters</td>\n</tr>\n<tr>\n<td><code>ImageClass</code></td>\n<td><code>Image.Node</code>\n or \n<code>Image.Browser</code></td>\n<td>An \n<code>Image</code>\n implementation class</td>\n</tr>\n<tr>\n<td><code>quantizer</code></td>\n<td><code>Vibrant.Quantizer.MMCQ</code></td>\n<td>A \n<code>Quantizer</code>\n implementation class</td>\n</tr>\n<tr>\n<td><code>generator</code></td>\n<td><code>Vibrant.Generator.Default</code></td>\n<td>An \n<code>Generator</code>\n instance</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"resolvablet\"><a href=\"#resolvablet\" class=\"phenomic-HeadingAnchor\">#</a><code>Resolvable&#x3C;T></code></h5>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> Resolvable&#x3C;T> = T | Bluebird&#x3C;T></code></pre>\n<h5 id=\"quantizer\"><a href=\"#quantizer\" class=\"phenomic-HeadingAnchor\">#</a><code>Quantizer</code></h5>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Quantizer {\n    (pixels: Pixels, opts: Options): Resolvable&#x3C;<span class=\"hljs-built_in\">Array</span>&#x3C;Swatch>>\n}</code></pre>\n<h5 id=\"generator\"><a href=\"#generator\" class=\"phenomic-HeadingAnchor\">#</a><code>Generator</code></h5>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Generator {\n    (swatches: <span class=\"hljs-built_in\">Array</span>&#x3C;Swatch>, opts?: <span class=\"hljs-built_in\">Object</span>): Resolvable&#x3C;Palette>\n}</code></pre>\n<h5 id=\"filter\"><a href=\"#filter\" class=\"phenomic-HeadingAnchor\">#</a><code>Filter</code></h5>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Filter {\n    (red: <span class=\"hljs-built_in\">number</span>, green: <span class=\"hljs-built_in\">number</span>, blue: <span class=\"hljs-built_in\">number</span>, alpha: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">boolean</span>\n}</code></pre>\n<h4 id=\"getpalettecb-callbackpalette-bluebirdpalette\"><a href=\"#getpalettecb-callbackpalette-bluebirdpalette\" class=\"phenomic-HeadingAnchor\">#</a><code>getPalette(cb?: Callback&#x3C;Palette>): Bluebird&#x3C;Palette></code></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>cb</code></td>\n<td>(Optional) callback function. Can be omitted when using \n<code>Promise</code>\n.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"callbackt\"><a href=\"#callbackt\" class=\"phenomic-HeadingAnchor\">#</a><code>Callback&#x3C;T></code></h5>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Callback&#x3C;T> {\n    (err?: <span class=\"hljs-built_in\">Error</span>, result?: T): <span class=\"hljs-built_in\">void</span>\n}</code></pre>\n<h4 id=\"getswatchescb-callbackpalette-bluebirdpalette\"><a href=\"#getswatchescb-callbackpalette-bluebirdpalette\" class=\"phenomic-HeadingAnchor\">#</a><code>getSwatches(cb?: Callback&#x3C;Palette>): Bluebird&#x3C;Palette></code></h4>\n<p>Alias of <code>getPalette</code>.</p>\n<h3 id=\"vibrantbuilder\"><a href=\"#vibrantbuilder\" class=\"phenomic-HeadingAnchor\">#</a><code>Vibrant.Builder</code></h3>\n<p>Helper class for change configurations and create a <code>Vibrant</code> instance. Methods of a <code>Builder</code> instance can be chained like:</p>\n<pre><code class=\"hljs language-ts\">Vibrant.from(src)\n  .quality(<span class=\"hljs-number\">1</span>)\n  .clearFilters()\n  <span class=\"hljs-comment\">// ...</span>\n  .getPalette()\n  .then((palette) => {})</code></pre>\n<h4 id=\"constructorsrc-imagesource-opts-partialoptions-1\"><a href=\"#constructorsrc-imagesource-opts-partialoptions-1\" class=\"phenomic-HeadingAnchor\">#</a><code>constructor(src: ImageSource, opts: Partial&#x3C;Options>)</code></h4>\n<p>Arguments are the same as <code>Vibrant.constructor</code>.</p>\n<h4 id=\"qualityq-number-builder\"><a href=\"#qualityq-number-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>quality(q: number): Builder</code></h4>\n<p>Sets <code>opts.quality</code> to <code>q</code>. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"maxcolorcountn-number-builder\"><a href=\"#maxcolorcountn-number-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>maxColorCount(n: number): Builder</code></h4>\n<p>Sets <code>opts.colorCount</code> to <code>n</code>. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"maxdimensiond-number-builder\"><a href=\"#maxdimensiond-number-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>maxDimension(d: number): Builder</code></h4>\n<p>Sets <code>opts.maxDimension</code> to <code>d</code>. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"addfilterf-filter-builder\"><a href=\"#addfilterf-filter-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>addFilter(f: Filter): Builder</code></h4>\n<p>Adds a filter function. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"removefilterf-filter-builder\"><a href=\"#removefilterf-filter-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>removeFilter(f: Filter): Builder</code></h4>\n<p>Removes a filter function. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"clearfilters-builder\"><a href=\"#clearfilters-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>clearFilters(): Builder</code></h4>\n<p>Clear all filters. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"useimageclassimageclass-imageclass-builder\"><a href=\"#useimageclassimageclass-imageclass-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>useImageClass(imageClass: ImageClass): Builder</code></h4>\n<p>Specifies which <code>Image</code> implementation class to use. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"usequantizerquantizer-quantizer-builder\"><a href=\"#usequantizerquantizer-quantizer-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>useQuantizer(quantizer: Quantizer): Builder</code></h4>\n<p>Specifies which <code>Quantizer</code> implementation class to use. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"usegeneratorgenerator-generator-builder\"><a href=\"#usegeneratorgenerator-generator-builder\" class=\"phenomic-HeadingAnchor\">#</a><code>useGenerator(generator: Generator): Builder</code></h4>\n<p>Sets <code>opts.generator</code> to <code>generator</code>. Returns this <code>Builder</code> instance.</p>\n<h4 id=\"build-vibrant\"><a href=\"#build-vibrant\" class=\"phenomic-HeadingAnchor\">#</a><code>build(): Vibrant</code></h4>\n<p>Builds and returns a <code>Vibrant</code> instance as configured.</p>\n<h4 id=\"getpalettecb-callbackpalette-bluebirdpalette-1\"><a href=\"#getpalettecb-callbackpalette-bluebirdpalette-1\" class=\"phenomic-HeadingAnchor\">#</a><code>getPalette(cb?: Callback&#x3C;Palette>): Bluebird&#x3C;Palette></code></h4>\n<p>Builds a <code>Vibrant</code> instance as configured and calls its <code>getPalette</code> method.</p>\n<h4 id=\"getswatchescb-callbackpalette-bluebirdpalette-1\"><a href=\"#getswatchescb-callbackpalette-bluebirdpalette-1\" class=\"phenomic-HeadingAnchor\">#</a><code>getSwatches(cb? Callback&#x3C;Palette>): Bluebird&#x3C;Palette></code></h4>\n<p>Alias of <code>getPalette</code>.</p>\n<h3 id=\"vibrantswatch\"><a href=\"#vibrantswatch\" class=\"phenomic-HeadingAnchor\">#</a><code>Vibrant.Swatch</code></h3>\n<p>Represents a color swatch generated from an image's palette.</p>\n<h4 id=\"vec3\"><a href=\"#vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>Vec3</code></h4>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Vec3 <span class=\"hljs-keyword\">extends</span> Array&#x3C;number> {\n    <span class=\"hljs-number\">0</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-number\">1</span>: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-number\">2</span>: <span class=\"hljs-built_in\">number</span>\n}</code></pre>\n<h4 id=\"constructorrgb-vec3-population-number\"><a href=\"#constructorrgb-vec3-population-number\" class=\"phenomic-HeadingAnchor\">#</a><code>constructor(rgb: Vec3, population: number)</code></h4>\n<p>Internal use.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>rgb</code></td>\n<td><code>[r, g, b]</code></td>\n</tr>\n<tr>\n<td><code>population</code></td>\n<td>Population of the color in an image</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"gethsl-vec3\"><a href=\"#gethsl-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>getHsl(): Vec3</code></h4>\n<h4 id=\"getpopulation-number\"><a href=\"#getpopulation-number\" class=\"phenomic-HeadingAnchor\">#</a><code>getPopulation(): number</code></h4>\n<h4 id=\"getrgb-vec3\"><a href=\"#getrgb-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>getRgb(): Vec3</code></h4>\n<h4 id=\"gethex-string\"><a href=\"#gethex-string\" class=\"phenomic-HeadingAnchor\">#</a><code>getHex(): string</code></h4>\n<h4 id=\"gettitletextcolor-string\"><a href=\"#gettitletextcolor-string\" class=\"phenomic-HeadingAnchor\">#</a><code>getTitleTextColor(): string</code></h4>\n<p>Returns an appropriate color to use for any 'body' text which is displayed over this <code>Swatch</code>'s color.</p>\n<h4 id=\"getbodytextcolor-string\"><a href=\"#getbodytextcolor-string\" class=\"phenomic-HeadingAnchor\">#</a><code>getBodyTextColor(): string</code></h4>\n<p>Returns an appropriate color to use for any 'title' text which is displayed over this <code>Swatch</code>'s color.</p>\n<h3 id=\"vibrantutil\"><a href=\"#vibrantutil\" class=\"phenomic-HeadingAnchor\">#</a><code>Vibrant.Util</code></h3>\n<p>Utility methods. Internal usage.</p>\n<h4 id=\"hextorgbhex-string-vec3\"><a href=\"#hextorgbhex-string-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>hexToRgb(hex: string): Vec3</code></h4>\n<h4 id=\"rgbtohexr-number-g-number-b-number-string\"><a href=\"#rgbtohexr-number-g-number-b-number-string\" class=\"phenomic-HeadingAnchor\">#</a><code>rgbToHex(r: number, g: number, b: number): string</code></h4>\n<h4 id=\"hsltorgbh-number-s-number-l-number-vec3\"><a href=\"#hsltorgbh-number-s-number-l-number-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>hslToRgb(h: number, s: number, l: number): Vec3</code></h4>\n<h4 id=\"rgbtohslr-number-g-number-b-number-vec3\"><a href=\"#rgbtohslr-number-g-number-b-number-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>rgbToHsl(r: number, g: number, b: number): Vec3</code></h4>\n<h4 id=\"xyztorgbx-number-y-number-z-number-vec3\"><a href=\"#xyztorgbx-number-y-number-z-number-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>xyzToRgb(x: number, y: number, z: number): Vec3</code></h4>\n<h4 id=\"rgbtoxyzr-number-g-number-b-number-vec3\"><a href=\"#rgbtoxyzr-number-g-number-b-number-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>rgbToXyz(r: number, g: number, b: number): Vec3</code></h4>\n<h4 id=\"xyztocielabx-number-y-number-z-number-vec3\"><a href=\"#xyztocielabx-number-y-number-z-number-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>xyzToCIELab(x: number, y: number, z: number): Vec3</code></h4>\n<h4 id=\"rgbtocielabl-number-a-number-b-number-vec3\"><a href=\"#rgbtocielabl-number-a-number-b-number-vec3\" class=\"phenomic-HeadingAnchor\">#</a><code>rgbToCIELab(l: number, a: number, b: number): Vec3</code></h4>\n<h4 id=\"deltae94lab1-number-lab2-number-number\"><a href=\"#deltae94lab1-number-lab2-number-number\" class=\"phenomic-HeadingAnchor\">#</a><code>deltaE94(lab1: number, lab2: number): number</code></h4>\n<p>Computes CIE delta E 1994 diff between <code>lab1</code> and <code>lab2</code>. The 2 colors are in CIE-Lab color space. Used in tests to compare 2 colors' perceptual similarity.</p>\n<h4 id=\"rgbdiffrgb1-vec3-rgb2-vec3-number\"><a href=\"#rgbdiffrgb1-vec3-rgb2-vec3-number\" class=\"phenomic-HeadingAnchor\">#</a><code>rgbDiff(rgb1: Vec3, rgb2: Vec3): number</code></h4>\n<p>Compute CIE delta E 1994 diff between <code>rgb1</code> and <code>rgb2</code>.</p>\n<h4 id=\"hexdiffhex1-string-hex2-string-number\"><a href=\"#hexdiffhex1-string-hex2-string-number\" class=\"phenomic-HeadingAnchor\">#</a><code>hexDiff(hex1: string, hex2: string): number</code></h4>\n<p>Compute CIE delta E 1994 diff between <code>hex1</code> and <code>hex2</code>.</p>\n<h4 id=\"getcolordiffstatusd-number-string\"><a href=\"#getcolordiffstatusd-number-string\" class=\"phenomic-HeadingAnchor\">#</a><code>getColorDiffStatus(d: number): string</code></h4>\n<p>Gets a string to describe the meaning of the color diff. Used in tests.</p>\n<table>\n<thead>\n<tr>\n<th>Delta E</th>\n<th>Perception</th>\n<th>Returns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#x3C;= 1.0</td>\n<td>Not perceptible by human eyes.</td>\n<td><code>\"Perfect\"</code></td>\n</tr>\n<tr>\n<td>1 - 2</td>\n<td>Perceptible through close observation.</td>\n<td><code>\"Close\"</code></td>\n</tr>\n<tr>\n<td>2 - 10</td>\n<td>Perceptible at a glance.</td>\n<td><code>\"Good\"</code></td>\n</tr>\n<tr>\n<td>11 - 49</td>\n<td>Colors are more similar than opposite</td>\n<td><code>\"Similar\"</code></td>\n</tr>\n<tr>\n<td>50 - 100</td>\n<td>Colors are exact opposite</td>\n<td><code>Wrong</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"npm-tasks\"><a href=\"#npm-tasks\" class=\"phenomic-HeadingAnchor\">#</a>NPM Tasks</h2>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>build:browser</code></td>\n<td>Build browser target</td>\n</tr>\n<tr>\n<td><code>build:node</code></td>\n<td>Build node.js target</td>\n</tr>\n<tr>\n<td><code>build</code></td>\n<td>Build all targets</td>\n</tr>\n<tr>\n<td><code>clean:browser</code></td>\n<td>Clean browser build</td>\n</tr>\n<tr>\n<td><code>clean:node</code></td>\n<td>Clean node.js build</td>\n</tr>\n<tr>\n<td><code>clean</code></td>\n<td>Clean all builds</td>\n</tr>\n<tr>\n<td><code>test:browser</code></td>\n<td>Run browser specs (karma)</td>\n</tr>\n<tr>\n<td><code>test:node</code></td>\n<td>Run node.js specs (mocha)</td>\n</tr>\n<tr>\n<td><code>test</code></td>\n<td>Run all specs</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"notes\"><a href=\"#notes\" class=\"phenomic-HeadingAnchor\">#</a>Notes</h2>\n<h3 id=\"intentional-deviation-from-vibrantjs\"><a href=\"#intentional-deviation-from-vibrantjs\" class=\"phenomic-HeadingAnchor\">#</a>Intentional Deviation From <code>vibrant.js</code></h3>\n<ul>\n<li><code>node-vibrant</code> takes image path, not the image object as parameter for the obvious reason that node.js environment has no access to HTML DOM object.</li>\n<li><code>node-vibrant</code> provides asynchronous API since most node.js image processing library is asynchronous. And the original <code>vibrant.js</code> workflow is asynchronous any way (though you will have to handle the image loading yourself, while <code>node-vibrant</code> does it for you).</li>\n<li><code>node-vibrant</code> uses one single <code>opts</code> object to hold all options for future expansions. And it feels more node.js-like.</li>\n<li><code>node-vibrant</code> uses method call to initiate image processing instead of constructor so that developers can use it with <code>Promise</code>.</li>\n</ul>\n<h3 id=\"result-consistency\"><a href=\"#result-consistency\" class=\"phenomic-HeadingAnchor\">#</a>Result Consistency</h3>\n<p>The results is consistent within each user's browser instance regardelss of visible region or display size of the image, unlike the original <code>vibrant.js</code> implementation.</p>\n<p>However, due to the very nature of HTML5 canvas element, image rendering is platform/machine-dependent. Thus the resulting swatches in browser environment varies and may not be the same as in node.js nor in another machine. See <a href=\"https://en.wikipedia.org/wiki/Canvas_fingerprinting\">Canvas Fingerprinting</a>.</p>\n<p>The test specs use CIE delta E 1994 color difference to measure inconsistencies across platforms. It compares the generated color on node.js, Chrome, Firefox and IE11. At <code>quality</code> == 1 (no downsampling) and no filters, the results are rather consistent. Color diffs between browsers are mostly not perceptible by human eyes. Downsampling <em>will</em> cause perceptible inconsistent results across browsers due to differences in canvas implementations.</p>\n","__filename":"docs.md","__url":"/docs/","__resourceUrl":"/docs/index.html","__dataUrl":"/docs/index.html.372388e2753d65fe09baad159f827541.json"}